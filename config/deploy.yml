# Name of your application. Used to uniquely configure containers.
service: httpmock

# Name of the container image.
image: ndolestudio/httpmock

# Deploy to these servers.
servers:
  web:
    hosts:
      - 172.178.76.39
    labels:
      traefik.http.routers.httpmock.rule: Host(`httpmock.dev`)
      traefik.http.routers.httpmock_secure.entrypoints: websecure
      traefik.http.routers.httpmock_secure.rule: Host(`httpmock.dev`)
      traefik.http.routers.httpmock_secure.tls: true
      traefik.http.routers.httpmock_secure.tls.certresolver: letsencrypt

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: najela

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
   clear:
     HOSTNAME: httpmock.dev
   secret:
     - RAILS_MASTER_KEY
     - UPTRACE_DSN
     - DB_HOST
     - DB_USERNAME
     - DB_PASSWORD
     - SMTP_HOST
     - SMTP_PASSWORD
     - SMTP_USERNAME
     - SMTP_PORT

# Use a different ssh user than root
ssh:
 user: arnold

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - "443:443"
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    accesslog: true
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "arnold@httpmock.dev"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
   path: /up
   port: 80

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# If your app is using the Sprockets gem, ensure it sets `config.assets.manifest`.
# See https://github.com/basecamp/kamal/issues/626 for details
#
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
# primary_role: web

# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
